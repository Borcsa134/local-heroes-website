generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model events {
  id                            Int                             @id @default(autoincrement())
  title                         String                          @unique(map: "events_title_idx") @db.VarChar
  author                        String?                         @db.VarChar
  slug                          String?                         @unique(map: "events_slug_idx") @db.VarChar
  cover_image_id                Int?
  event_date                    DateTime?                       @db.Timestamptz(3)
  regular_event                 Boolean?                        @default(false)
  content                       Json?
  published                     Boolean?                        @default(false)
  published_at                  DateTime?                       @db.Timestamptz(3)
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  media                         media?                          @relation(fields: [cover_image_id], references: [id], onUpdate: NoAction, map: "events_cover_image_id_media_id_fk")
  payload_locked_documents_rels payload_locked_documents_rels[]

  @@index([cover_image_id], map: "events_cover_image_idx")
  @@index([created_at])
  @@index([updated_at])
}

model media {
  id                            Int                             @id @default(autoincrement())
  alt                           String?                         @db.VarChar
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  url                           String?                         @db.VarChar
  thumbnail_u_r_l               String?                         @db.VarChar
  filename                      String?                         @unique(map: "media_filename_idx") @db.VarChar
  mime_type                     String?                         @db.VarChar
  filesize                      Decimal?                        @db.Decimal
  width                         Decimal?                        @db.Decimal
  height                        Decimal?                        @db.Decimal
  focal_x                       Decimal?                        @db.Decimal
  focal_y                       Decimal?                        @db.Decimal
  sizes_thumbnail_url           String?                         @db.VarChar
  sizes_thumbnail_width         Decimal?                        @db.Decimal
  sizes_thumbnail_height        Decimal?                        @db.Decimal
  sizes_thumbnail_mime_type     String?                         @db.VarChar
  sizes_thumbnail_filesize      Decimal?                        @db.Decimal
  sizes_thumbnail_filename      String?                         @db.VarChar
  sizes_card_url                String?                         @db.VarChar
  sizes_card_width              Decimal?                        @db.Decimal
  sizes_card_height             Decimal?                        @db.Decimal
  sizes_card_mime_type          String?                         @db.VarChar
  sizes_card_filesize           Decimal?                        @db.Decimal
  sizes_card_filename           String?                         @db.VarChar
  sizes_tablet_url              String?                         @db.VarChar
  sizes_tablet_width            Decimal?                        @db.Decimal
  sizes_tablet_height           Decimal?                        @db.Decimal
  sizes_tablet_mime_type        String?                         @db.VarChar
  sizes_tablet_filesize         Decimal?                        @db.Decimal
  sizes_tablet_filename         String?                         @db.VarChar
  events                        events[]
  news                          news[]
  payload_locked_documents_rels payload_locked_documents_rels[]

  @@index([created_at])
  @@index([sizes_card_filename], map: "media_sizes_card_sizes_card_filename_idx")
  @@index([sizes_tablet_filename], map: "media_sizes_tablet_sizes_tablet_filename_idx")
  @@index([sizes_thumbnail_filename], map: "media_sizes_thumbnail_sizes_thumbnail_filename_idx")
  @@index([updated_at])
}

model news {
  id                            Int                             @id @default(autoincrement())
  title                         String                          @unique(map: "news_title_idx") @db.VarChar
  published                     Boolean?                        @default(false)
  author                        String?                         @db.VarChar
  slug                          String?                         @unique(map: "news_slug_idx") @db.VarChar
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  content                       Json?
  published_at                  DateTime?                       @db.Timestamptz(3)
  cover_image_id                Int?
  media                         media?                          @relation(fields: [cover_image_id], references: [id], onUpdate: NoAction, map: "news_cover_image_id_media_id_fk")
  payload_locked_documents_rels payload_locked_documents_rels[]

  @@index([cover_image_id], map: "news_cover_image_idx")
  @@index([created_at])
  @@index([updated_at])
}

model payload_locked_documents {
  id                            Int                             @id @default(autoincrement())
  global_slug                   String?                         @db.VarChar
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  payload_locked_documents_rels payload_locked_documents_rels[]

  @@index([created_at])
  @@index([global_slug])
  @@index([updated_at])
}

model payload_locked_documents_rels {
  id                       Int                      @id @default(autoincrement())
  order                    Int?
  parent_id                Int
  path                     String                   @db.VarChar
  users_id                 Int?
  news_id                  Int?
  media_id                 Int?
  events_id                Int?
  events                   events?                  @relation(fields: [events_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_locked_documents_rels_events_fk")
  media                    media?                   @relation(fields: [media_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_locked_documents_rels_media_fk")
  news                     news?                    @relation(fields: [news_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_locked_documents_rels_news_fk")
  payload_locked_documents payload_locked_documents @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_locked_documents_rels_parent_fk")
  users                    users?                   @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_locked_documents_rels_users_fk")

  @@index([events_id])
  @@index([media_id])
  @@index([news_id])
  @@index([order])
  @@index([parent_id], map: "payload_locked_documents_rels_parent_idx")
  @@index([path])
  @@index([users_id])
}

model payload_migrations {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar
  batch      Decimal? @db.Decimal
  updated_at DateTime @default(now()) @db.Timestamptz(3)
  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@index([created_at])
  @@index([updated_at])
}

model payload_preferences {
  id                       Int                        @id @default(autoincrement())
  key                      String?                    @db.VarChar
  value                    Json?
  updated_at               DateTime                   @default(now()) @db.Timestamptz(3)
  created_at               DateTime                   @default(now()) @db.Timestamptz(3)
  payload_preferences_rels payload_preferences_rels[]

  @@index([created_at])
  @@index([key])
  @@index([updated_at])
}

model payload_preferences_rels {
  id                  Int                 @id @default(autoincrement())
  order               Int?
  parent_id           Int
  path                String              @db.VarChar
  users_id            Int?
  payload_preferences payload_preferences @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_preferences_rels_parent_fk")
  users               users?              @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payload_preferences_rels_users_fk")

  @@index([order])
  @@index([parent_id], map: "payload_preferences_rels_parent_idx")
  @@index([path])
  @@index([users_id])
}

model users {
  id                            Int                             @id @default(autoincrement())
  email                         String                          @unique(map: "users_email_idx") @db.VarChar
  created_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  hash                          String?                         @db.VarChar
  lock_until                    DateTime?                       @db.Timestamptz(3)
  login_attempts                Decimal?                        @default(0) @db.Decimal
  reset_password_expiration     DateTime?                       @db.Timestamptz(3)
  reset_password_token          String?                         @db.VarChar
  salt                          String?                         @db.VarChar
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(3)
  role                          enum_users_role                 @default(editor)
  name                          String?                         @default("editor") @db.VarChar
  payload_locked_documents_rels payload_locked_documents_rels[]
  payload_preferences_rels      payload_preferences_rels[]

  @@index([created_at])
  @@index([updated_at])
}

model DiscordUsers {
  id       Int    @id @default(autoincrement())
  username String
  fullname String
  email    String @unique(map: "discord_users_email_unique")

  @@map("discord_users")
}

enum enum_users_role {
  admin
  editor
}
